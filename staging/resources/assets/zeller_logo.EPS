%!PS-Adobe-3.0 EPSF-3.0
%%Creator:Gerber Scientific Products Exported from Omega
%%For: (Steve Hodel) (Signs Now)
%%Title: (zeller_logo.EPS)
%%CreationDate: 08/07/109 09:06
%%BoundingBox: 118 3125 1232 3530
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%DocumentCustomColors: (CutContour)
%%CMYKCustomColor: 0.1 0.1 0.1 0.1 (CutContour)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 7 3084 1343 3571
%AI3_TileBox: 18 12 594 780
%AI3_DocumentPreview: Header
%AI5_ArtSize:  1225 446
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: 18 3630 1.000000 1000 700 26 0 0 0 0 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:18 12
%%AI3_PaperRect:-18 780 594 -12
%%AI3_Margin:18 -12 -18 12
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 0
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource

%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	queryDevice
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		}def
	}if
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
			_renderFlag 2 ne{
				_illustrator{
					_of setoverprint
				}if
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	currentdict/Bb known not{
		/Bb{
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	currentdict/BB known not{
		/BB{
			/_tmp xp
			cleartomark cleartomark
			_tmp dup
			_renderFlag
			myRestore
			_producingSeps{
			 end
			}if
			_illustrator dup
		 end
			not {
			 end
			}if
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		}def
	}if
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	/fillRamp{
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		getRampColorSpace
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	popBSpace
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		radialInit
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
			_nSamples 1 sub
			_nRadSamples 
			[
				/dup cvx
				_optimize{
					/round cvx /cvi cvx
				}if
				/_ndx /exch cvx /pt cvx
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
				blendColor
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
				/exch cvx _bInc /add cvx /exch cvx
				_sInc /add cvx
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
		_saveMatrix setmatrix
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		_usingShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		6 index exec
		3 index
	} for
	5 { pop } repeat
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	.59 mul add exch
	.3 mul add
	cvi 3 copy put
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	exch .59 mul add
	exch .3 mul add
	dup 255 gt { pop 255 } if
	255 exch sub cvi 3 copy put
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			dup length 4 idiv string
			0 2 index
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				3 copy put pop 1 add
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					_colorimage
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			2 index false charpath
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			/clipForward? true def
			/Tx /pop load def
			/Tj /pop load def
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%%EndSetup
0 G
0 g
0 j
0 J
0 w
1 XR
0.0 0.000 0.0 1.000 K
0.0 0.000 0.0 1.000 k
*u
1.000 0.420 0.000 0.000 (PANTONE 300 C) 0.000 x
928.170 3406.284 m
924.912 3430.656 l
898.110 3430.548 l
890.172 3430.494 l
890.820 3423.834 l
891.324 3419.604 891.180 3416.490 890.802 3414.240 c
890.064 3409.866 888.336 3408.552 887.274 3407.868 c
886.140 3407.112 885.798 3406.050 873.432 3405.978 c
863.406 3405.906 l
856.494 3457.710 l
877.410 3457.746 l
873.972 3483.684 l
779.256 3483.396 l
782.712 3457.440 l
802.278 3457.548 l
802.656 3457.566 802.944 3457.548 803.286 3457.566 c
803.250 3457.530 803.250 3457.494 803.250 3457.440 c
810.162 3405.816 l
809.820 3405.816 809.388 3405.798 808.920 3405.870 c
795.294 3405.744 l
792.108 3430.152 l
765.360 3429.972 l
757.422 3429.954 l
758.088 3423.348 l
758.502 3419.136 758.412 3416.130 758.070 3413.934 c
757.260 3409.524 755.478 3408.120 754.344 3407.382 c
753.624 3406.932 753.264 3406.734 753.012 3406.608 c
752.292 3406.266 750.348 3405.528 740.682 3405.492 c
730.530 3405.474 l
723.636 3457.224 l
744.570 3457.242 l
741.168 3483.198 l
647.298 3482.892 l
647.298 3482.910 l
500.670 3482.280 l
504.108 3456.540 l
524.052 3456.612 l
524.268 3456.648 524.502 3456.630 524.718 3456.612 c
524.718 3456.540 524.718 3456.450 524.718 3456.360 c
531.450 3404.808 l
510.930 3404.790 l
514.278 3378.888 l
660.996 3379.464 l
660.996 3379.482 l
798.678 3379.950 l
798.678 3379.950 l
931.662 3380.436 l
931.662 3380.472 l
1072.494 3380.940 l
1072.494 3380.958 l
1166.634 3381.264 l
1165.410 3390.678 l
1170.846 3385.908 1178.298 3382.686 1187.676 3381.282 c
1191.564 3380.688 1195.686 3380.436 1200.078 3380.436 c
1222.830 3380.490 1230.120 3392.730 1231.578 3401.064 c
1231.956 3403.224 1231.938 3405.204 1231.758 3406.698 c
1230.030 3420.486 l
1206.432 3420.450 l
1205.136 3426.444 1201.572 3431.394 1196.442 3435.048 c
1202.724 3438.738 1206.864 3444.048 1208.016 3450.762 c
1208.412 3452.994 1208.412 3455.316 1208.106 3457.620 c
1206.414 3470.382 1194.498 3480.588 1174.068 3483.702 c
1169.532 3484.386 1164.636 3484.728 1159.272 3484.710 c
1058.670 3484.386 l
1058.670 3484.404 l
912.078 3483.810 l
915.516 3458.034 l
935.388 3458.034 l
935.640 3458.052 935.874 3458.034 936.108 3458.034 c
936.108 3458.016 936.126 3457.980 936.108 3457.890 c
942.840 3406.302 l
928.170 3406.284 l
f
659.952 3269.466 m
662.634 3261.636 668.988 3258.216 677.178 3255.714 c
681.120 3254.508 685.206 3254.112 689.184 3254.436 c
696.240 3255.066 704.178 3257.910 713.286 3265.110 c
716.184 3267.468 718.992 3270.294 721.656 3273.192 c
722.790 3274.218 723.870 3275.334 724.950 3276.414 c
725.796 3277.278 726.768 3278.070 727.668 3278.934 c
730.170 3271.302 736.290 3263.598 746.100 3260.538 c
749.592 3259.476 753.300 3259.152 757.278 3259.404 c
764.388 3260.034 773.334 3263.364 783.864 3272.238 c
786.744 3274.722 789.246 3277.368 791.748 3279.834 c
792.954 3281.130 794.304 3282.408 795.456 3283.614 c
795.294 3281.724 795.240 3280.086 795.366 3278.952 c
795.978 3272.130 799.542 3266.496 806.688 3264.354 c
809.298 3263.544 812.106 3263.328 814.716 3263.526 c
818.064 3263.850 821.304 3264.912 824.166 3266.316 c
832.698 3270.384 842.454 3278.772 852.156 3287.142 c
854.118 3288.798 856.188 3290.526 858.060 3292.236 c
859.338 3293.244 l
859.338 3293.316 l
877.410 3309.120 l
875.844 3306.636 874.728 3304.314 873.828 3302.172 c
871.506 3296.610 870.894 3292.110 871.200 3288.708 c
871.848 3281.220 875.844 3275.748 882.540 3273.624 c
884.790 3273.012 887.076 3272.724 889.182 3273.012 c
892.944 3273.264 897.372 3274.614 904.986 3280.086 c
910.206 3283.866 915.048 3288.186 919.692 3292.272 c
920.520 3293.082 921.366 3293.766 922.284 3294.540 c
924.606 3286.710 930.186 3281.346 937.134 3279.258 c
939.816 3278.412 942.534 3278.034 945.252 3278.286 c
950.220 3278.700 958.950 3280.914 980.370 3300.300 c
982.926 3292.524 988.992 3284.874 998.982 3281.796 c
1002.330 3280.734 1006.038 3280.302 1010.070 3280.590 c
1017.180 3281.292 1026.918 3283.866 1037.376 3292.884 c
1043.334 3298.104 1049.472 3302.856 1054.854 3307.464 c
1069.578 3288.942 l
1148.976 3348.612 l
1075.302 3318.642 l
1064.304 3341.052 l
1063.566 3342.438 1027.314 3309.750 1020.618 3306.744 c
1014.156 3303.900 1012.086 3303.612 1010.574 3303.450 c
1009.098 3303.360 1007.946 3303.522 1007.118 3303.828 c
1005.300 3304.350 1001.898 3305.916 1003.122 3309.084 c
1005.534 3316.068 1008.288 3321.720 1015.488 3326.958 c
1016.316 3327.588 1014.750 3320.388 1019.862 3319.794 c
1021.104 3319.686 1022.688 3319.254 1024.128 3319.398 c
1028.232 3319.758 1032.678 3322.170 1037.502 3327.912 c
1040.526 3331.278 1042.506 3334.644 1043.856 3337.686 c
1045.188 3340.710 1045.692 3343.590 1045.584 3345.876 c
1045.278 3349.782 1042.884 3353.958 1037.124 3355.758 c
1034.856 3356.442 1032.498 3356.586 1030.032 3356.442 c
1023.912 3355.902 1013.472 3352.446 1002.240 3344.436 c
993.474 3338.154 988.398 3331.764 985.896 3328.704 c
985.446 3327.966 985.032 3327.606 984.816 3327.354 c
983.124 3325.392 981.450 3323.574 979.776 3321.810 c
978.804 3321.036 978.048 3320.262 977.058 3319.434 c
975.924 3318.498 974.844 3317.436 973.674 3316.374 c
973.026 3315.618 l
972.144 3314.862 l
960.264 3304.494 953.136 3302.910 951.156 3302.694 c
950.328 3302.622 949.914 3302.784 949.680 3302.784 c
949.230 3302.928 948.600 3303.288 948.492 3304.350 c
948.492 3304.944 948.492 3305.682 948.942 3306.744 c
949.392 3307.806 950.292 3309.120 951.948 3310.812 c
952.920 3311.784 954.018 3312.774 955.548 3314.052 c
959.436 3317.202 964.530 3321.504 968.112 3328.326 c
968.598 3329.244 968.634 3330.198 969.390 3330.864 c
973.278 3335.724 969.588 3339.882 969.390 3341.736 c
977.004 3343.266 983.322 3350.682 985.446 3355.938 c
986.238 3357.666 986.760 3359.592 986.490 3361.572 c
986.148 3365.694 983.034 3369.510 978.354 3370.932 c
976.788 3371.418 975.150 3371.598 973.512 3371.544 c
965.952 3370.878 958.608 3364.056 956.088 3357.936 c
955.152 3355.992 954.702 3353.796 954.864 3351.510 c
955.134 3349.962 955.602 3348.468 956.682 3346.992 c
952.056 3346.380 947.124 3344.400 940.968 3339.468 c
938.124 3337.272 934.596 3333.744 931.266 3329.460 c
931.050 3329.244 930.762 3328.776 930.618 3328.614 c
929.142 3326.184 923.724 3317.742 916.830 3311.478 c
916.326 3310.956 l
914.310 3309.300 l
905.598 3302.334 901.962 3300.300 900.486 3299.760 c
900.576 3300.300 900.756 3301.470 901.458 3303.090 c
902.592 3305.772 905.022 3309.696 909.900 3315.042 c
910.674 3315.996 911.592 3316.770 912.492 3317.778 c
913.716 3318.966 914.994 3320.298 916.290 3321.702 c
917.190 3322.836 918.108 3323.898 918.594 3325.014 c
919.188 3326.526 919.044 3327.750 919.044 3328.578 c
918.792 3330.432 916.470 3336.372 914.508 3338.712 c
913.482 3339.972 911.844 3341.358 909.378 3342.150 c
907.452 3342.762 905.454 3342.762 903.726 3342.600 c
902.538 3342.564 901.404 3342.366 896.580 3341.574 c
892.476 3340.872 889.542 3340.422 887.256 3339.972 c
886.770 3341.934 885.294 3343.896 882.198 3344.796 c
880.614 3345.264 879.138 3345.390 877.914 3345.318 c
875.412 3345.102 871.542 3343.446 867.618 3340.836 c
867.960 3341.628 868.050 3342.438 868.050 3343.320 c
867.870 3344.940 866.880 3347.568 863.028 3348.792 c
864.846 3350.952 l
866.142 3352.464 867.024 3353.670 867.528 3354.822 c
867.996 3355.992 868.122 3356.946 868.050 3357.846 c
867.870 3359.970 866.286 3362.850 861.858 3364.128 c
859.500 3364.956 856.818 3365.082 853.830 3364.848 c
846.180 3364.128 841.716 3362.184 832.788 3351.042 c
830.664 3348.324 l
825.354 3347.964 l
815.598 3347.370 808.146 3343.824 801.162 3334.338 c
799.488 3332.016 798.300 3330.288 797.796 3328.794 c
797.112 3327.192 797.058 3325.950 797.112 3324.960 c
797.220 3323.376 798.138 3320.388 802.638 3319.002 c
804.312 3318.426 806.238 3318.264 808.110 3318.336 c
803.880 3313.692 798.210 3308.346 791.622 3302.172 c
791.316 3301.938 791.010 3301.596 790.632 3301.290 c
789.552 3300.228 l
789.498 3300.210 789.444 3300.174 789.390 3300.120 c
788.742 3299.400 l
783.864 3294.504 774.576 3288.618 767.880 3285.540 c
761.418 3282.642 759.294 3282.408 757.782 3282.318 c
756.234 3282.210 755.118 3282.318 754.254 3282.624 c
752.490 3283.164 750.582 3284.658 750.276 3287.808 c
753.876 3292.776 758.448 3296.970 763.740 3300.372 c
764.568 3299.706 765.684 3299.040 767.070 3298.716 c
768.546 3298.266 769.986 3298.140 771.264 3298.266 c
775.350 3298.518 779.796 3300.948 784.764 3306.690 c
787.698 3310.128 789.732 3313.440 791.100 3316.410 c
792.396 3319.488 792.954 3322.404 792.792 3324.708 c
792.450 3328.686 790.110 3332.772 784.458 3334.482 c
782.136 3335.238 779.670 3335.382 777.222 3335.202 c
771.066 3334.716 760.806 3331.260 749.448 3323.214 c
740.880 3316.986 735.696 3310.722 733.194 3307.572 c
732.582 3306.852 732.294 3306.474 732.114 3306.168 c
730.332 3304.260 728.658 3302.406 726.930 3300.678 c
725.346 3299.094 723.690 3297.618 722.016 3296.034 c
719.154 3293.604 l
703.332 3278.952 696.888 3279.024 694.818 3278.862 c
693.540 3278.736 692.460 3278.898 691.758 3279.078 c
690.822 3279.366 689.526 3280.068 688.788 3281.904 c
713.286 3293.478 723.006 3304.422 726.336 3312.180 c
727.578 3315.240 727.866 3317.742 727.758 3319.668 c
727.416 3323.394 725.076 3327.606 718.812 3329.514 c
715.932 3330.432 712.548 3330.594 708.804 3330.342 c
697.320 3329.406 683.982 3323.664 672.642 3312.306 c
669.204 3308.724 666.486 3305.268 662.598 3298.518 c
660.096 3293.766 659.646 3293.586 658.566 3292.470 c
658.548 3292.398 658.494 3292.272 658.404 3292.182 c
657.540 3291.336 656.586 3290.436 655.506 3289.410 c
655.056 3288.960 l
652.356 3286.548 l
643.932 3278.826 639.000 3276.324 636.732 3275.496 c
635.652 3275.100 634.374 3275.352 633.672 3276.324 c
630.576 3280.608 628.560 3286.944 632.988 3290.958 c
648.954 3305.412 658.710 3320.424 663.930 3332.754 c
668.070 3342.366 669.546 3350.646 669.060 3356.082 c
668.718 3360.258 666.738 3364.254 661.716 3365.766 c
660.222 3366.216 658.746 3366.360 657.378 3366.198 c
653.346 3365.910 641.160 3361.626 624.222 3334.950 c
619.344 3327.210 615.168 3318.804 611.460 3310.056 c
609.642 3305.718 606.438 3295.404 604.638 3290.022 c
603.828 3287.610 597.780 3284.982 596.232 3278.340 c
594.576 3271.446 605.070 3270.708 605.070 3270.708 c
607.734 3263.256 l
612.846 3249.090 630.432 3246.858 641.664 3255.570 c
647.964 3260.466 l
659.952 3269.466 l
f
142.218 3287.556 m
315.936 3305.682 l
315.252 3305.250 314.550 3304.692 313.776 3304.116 c
310.896 3302.100 306.000 3299.058 304.704 3297.456 c
302.760 3295.008 299.412 3288.474 304.668 3288.762 c
311.040 3289.068 350.334 3295.152 364.662 3295.260 c
393.300 3295.404 398.430 3297.726 419.544 3296.574 c
467.172 3293.820 l
497.214 3289.266 l
497.556 3289.176 469.728 3265.632 465.246 3252.996 c
464.004 3249.720 463.536 3246.408 464.058 3243.312 c
464.472 3239.964 466.794 3234.636 471.186 3229.668 c
472.644 3228.534 475.776 3223.350 484.884 3221.046 c
490.914 3219.408 499.032 3218.976 510.156 3220.488 c
540.486 3224.268 566.496 3238.038 578.502 3250.602 c
582.624 3254.850 585.252 3258.846 586.710 3263.022 c
588.114 3267.000 588.438 3270.852 587.862 3274.578 c
587.484 3277.044 586.152 3280.590 581.670 3281.760 c
580.176 3282.102 578.790 3282.102 577.854 3281.976 c
575.154 3281.652 573.624 3280.374 571.086 3278.502 c
565.110 3274.056 552.762 3265.884 546.264 3262.518 c
532.206 3255.120 521.136 3251.934 511.866 3250.728 c
504.090 3249.738 500.238 3250.206 498.474 3250.548 c
497.826 3250.710 497.358 3251.304 497.358 3251.970 c
497.358 3252.078 497.358 3252.870 497.880 3254.004 c
498.906 3257.100 502.596 3262.950 513.972 3269.754 c
520.164 3273.480 531.054 3278.790 547.128 3284.082 c
549.450 3284.748 551.574 3285.450 553.734 3286.116 c
556.704 3286.998 559.764 3287.826 562.752 3288.960 c
569.268 3291.192 572.400 3293.892 575.442 3298.734 c
576.072 3299.976 576.666 3301.128 576.954 3302.190 c
577.638 3304.188 577.962 3306.204 577.818 3307.482 c
577.494 3309.498 576.432 3312.720 571.302 3314.052 c
566.694 3315.276 558.360 3314.682 543.888 3312.990 c
514.872 3309.678 514.332 3310.704 511.596 3310.704 c
510.480 3310.704 508.842 3311.442 509.616 3312.738 c
510.678 3314.466 512.928 3317.004 517.824 3320.316 c
523.638 3324.312 537.462 3330.162 551.934 3332.430 c
551.610 3332.088 551.448 3331.692 551.160 3331.368 c
551.070 3331.314 549.306 3329.352 548.784 3327.876 c
548.514 3327.174 548.406 3326.238 548.658 3325.248 c
548.982 3322.836 551.160 3320.982 553.932 3320.190 c
554.904 3319.866 556.110 3319.812 557.298 3319.992 c
560.358 3320.388 562.716 3322.242 563.040 3322.494 c
563.256 3322.638 575.982 3331.206 582.408 3335.346 c
582.822 3335.670 583.218 3335.886 583.794 3336.318 c
586.350 3337.812 592.254 3341.178 593.892 3345.984 c
594.450 3347.316 594.666 3348.720 594.360 3350.286 c
592.992 3359.772 590.022 3364.578 582.678 3366.504 c
581.994 3366.702 581.346 3366.864 580.734 3366.936 c
579.006 3367.260 570.762 3367.962 556.380 3366.108 c
533.448 3363.192 522.774 3361.716 496.944 3351.222 c
345.798 3351.078 l
333.432 3351.492 335.538 3354.498 335.214 3354.678 c
335.250 3354.696 338.616 3357.450 339.642 3358.224 c
363.132 3376.656 387.288 3390.786 407.754 3405.942 c
415.296 3411.918 416.376 3413.574 418.212 3415.896 c
423.666 3422.412 414.054 3424.410 409.842 3424.482 c
403.416 3424.554 396.396 3426.318 391.644 3426.714 c
525.618 3504.150 l
528.948 3506.076 529.308 3509.100 526.194 3510.414 c
525.204 3510.864 523.944 3511.080 522.738 3511.350 c
518.202 3512.340 509.526 3512.682 499.860 3512.916 c
470.088 3513.528 421.542 3511.944 400.536 3511.206 c
396.306 3511.152 393.246 3511.008 391.590 3510.936 c
324.594 3509.280 266.220 3510.072 246.168 3513.996 c
236.466 3515.922 l
226.134 3517.992 208.080 3525.750 205.956 3527.712 c
203.454 3530.034 197.226 3529.260 194.490 3526.218 c
194.166 3525.840 193.968 3525.570 193.518 3525.156 c
186.732 3516.660 185.490 3505.824 188.802 3498.768 c
189.126 3498.318 189.414 3497.832 189.630 3497.112 c
193.482 3488.400 203.364 3466.206 253.188 3456.378 c
274.626 3452.058 303.426 3450.240 341.856 3452.508 c
314.136 3438.090 286.074 3413.916 270.090 3403.944 c
268.668 3403.026 259.344 3396.834 258.696 3395.358 c
256.842 3391.776 260.892 3388.230 262.062 3388.050 c
270.828 3386.736 265.248 3387.798 277.020 3387.402 c
246.420 3367.332 167.094 3327.768 129.798 3311.370 c
119.682 3306.906 118.440 3304.440 122.526 3296.664 c
126.594 3288.726 136.818 3287.466 142.218 3287.556 c
f
1062.072 3458.610 m
1080.648 3458.574 l
1081.260 3458.610 1081.710 3458.610 1082.106 3458.574 c
1082.142 3458.466 1082.178 3458.358 1082.196 3458.214 c
1088.964 3406.824 l
1069.038 3406.716 l
1065.888 3430.638 l
1038.636 3430.548 l
1030.806 3430.548 l
1030.140 3435.714 l
1036.980 3435.750 l
1065.042 3435.804 l
1062.072 3458.610 l
f
650.736 3456.918 m
669.528 3457.116 l
669.906 3457.062 670.230 3457.080 670.482 3457.062 c
670.482 3457.026 l
677.286 3405.312 l
676.944 3405.330 676.566 3405.330 676.152 3405.312 c
657.594 3405.204 l
654.444 3429.162 l
627.300 3429.126 l
619.326 3429.072 l
618.678 3434.256 l
625.536 3434.220 l
653.778 3434.292 l
650.736 3456.918 l
f
853.380 3323.772 m
852.750 3321.954 852.372 3320.064 852.372 3318.156 c
852.372 3317.742 852.390 3317.346 852.426 3316.932 c
852.624 3314.520 853.524 3312.540 854.910 3311.046 c
852.876 3308.886 851.022 3307.212 850.068 3306.384 c
849.924 3306.240 849.762 3306.114 849.582 3305.970 c
849.168 3305.610 848.610 3305.124 848.070 3304.602 c
844.344 3300.984 834.732 3293.874 830.808 3291.624 c
828.054 3290.040 827.190 3290.022 826.650 3289.968 c
826.398 3289.968 l
825.606 3289.968 825.372 3290.220 825.300 3290.922 c
825.282 3291.066 825.264 3291.246 825.264 3291.516 c
825.264 3294.486 826.830 3303.486 838.206 3319.110 c
839.646 3319.110 841.248 3319.164 842.652 3319.272 c
845.910 3319.506 849.330 3320.514 853.380 3323.772 c
f
1136.988 3446.928 m
1135.476 3458.772 l
1143.216 3458.808 l
1145.628 3458.844 1147.356 3458.718 1148.688 3458.520 c
1150.902 3458.142 1151.964 3457.638 1153.134 3456.792 c
1154.880 3455.622 1155.798 3454.182 1156.014 3452.508 c
1156.104 3451.824 1156.104 3451.284 1156.032 3450.834 c
1155.834 3449.862 1155.420 3449.268 1154.880 3448.800 c
1154.016 3448.134 1152.648 3446.946 1145.178 3446.928 c
1136.988 3446.928 l
f
1156.122 3407.094 m
1143.720 3406.986 l
1143.198 3406.986 1142.730 3406.950 1142.316 3406.986 c
1140.336 3422.196 l
1146.942 3422.196 l
1149.390 3422.196 1151.082 3422.124 1152.324 3421.890 c
1152.864 3421.872 1153.224 3421.764 1153.476 3421.710 c
1153.566 3421.692 1153.638 3421.584 1153.692 3421.584 c
1153.728 3421.548 l
1153.908 3421.260 1154.196 3420.468 1154.448 3418.560 c
1154.448 3418.416 1154.484 3418.146 1154.520 3417.858 c
1155.708 3409.164 l
1155.870 3408.462 1155.960 3407.778 1156.122 3407.094 c
f
589.554 3405.114 m
584.568 3405.078 l
582.750 3419.352 l
583.506 3419.352 584.154 3419.280 584.676 3419.136 c
586.710 3418.866 589.050 3418.560 589.320 3411.846 c
589.554 3405.114 l
f
1001.070 3406.608 m
996.066 3406.554 l
994.266 3420.846 l
994.968 3420.792 995.616 3420.720 996.174 3420.648 c
998.172 3420.342 1000.476 3420.054 1000.782 3413.412 c
1001.070 3406.608 l
f
583.146 3456.702 m
584.082 3451.698 l
584.514 3449.376 584.514 3447.864 584.334 3446.856 c
584.064 3445.272 583.830 3444.894 580.968 3444.894 c
579.510 3444.876 l
577.944 3456.702 l
583.146 3456.702 l
f
994.626 3458.214 m
995.562 3453.228 l
995.976 3450.924 995.976 3449.358 995.850 3448.332 c
995.562 3446.838 995.310 3446.370 992.394 3446.388 c
990.990 3446.388 l
989.424 3458.142 l
994.626 3458.214 l
f
860.958 3351.726 m
860.868 3351.438 l
860.688 3351.114 860.652 3350.682 860.472 3350.322 c
860.958 3351.726 l
f
*U
*u
0.000 0.000 0.000 1.000 (Black) 0.000 x
1173.888 3268.152 m
1173.672 3267.936 l
1171.692 3266.550 1168.290 3264.984 1165.770 3264.246 c
1163.448 3263.598 1162.584 3263.544 1161.774 3263.544 c
1159.218 3263.562 1157.544 3264.912 1157.580 3266.748 c
1157.634 3266.910 1157.634 3267.000 1157.544 3267.072 c
1159.758 3269.178 1162.332 3270.762 1165.392 3271.788 c
1165.338 3271.536 1165.320 3271.518 1165.266 3271.248 c
1165.320 3270.618 1165.680 3270.222 1166.418 3270.222 c
1167.102 3270.222 1168.200 3270.474 1169.910 3271.950 c
1171.980 3273.606 1172.808 3275.406 1172.916 3276.270 c
1172.952 3277.512 1171.980 3278.304 1170.108 3278.304 c
1168.578 3278.376 1165.320 3277.836 1161.540 3275.892 c
1158.048 3274.092 1156.158 3272.112 1155.420 3271.536 c
1154.790 3271.014 1154.160 3270.474 1153.440 3270.060 c
1152.774 3269.592 1152.072 3269.106 1151.280 3268.602 c
1150.992 3268.440 l
1150.506 3268.062 l
1147.014 3265.740 1144.728 3265.380 1144.116 3265.380 c
1143.252 3265.380 1142.910 3265.740 1142.820 3266.460 c
1142.964 3266.856 1143.378 3268.512 1147.266 3271.590 c
1148.634 3272.670 1149.858 3273.408 1149.858 3275.100 c
1149.948 3276.630 1148.292 3277.548 1147.644 3277.620 c
1146.906 3277.656 1146.222 3277.242 1144.728 3276.648 c
1141.650 3275.280 1137.906 3273.192 1133.658 3270.114 c
1132.974 3269.646 1132.416 3269.232 1131.822 3268.800 c
1131.642 3268.602 1131.390 3268.440 1131.084 3268.458 c
1130.832 3268.458 1130.742 3268.602 1130.742 3268.890 c
1130.832 3269.880 1132.416 3270.762 1134.144 3271.968 c
1136.862 3273.786 1137.042 3274.362 1137.042 3274.902 c
1137.042 3275.586 1136.520 3276.234 1134.396 3276.270 c
1132.902 3276.270 1131.552 3276.054 1128.726 3273.606 c
1127.646 3272.706 1126.674 3271.662 1125.522 3270.708 c
1124.928 3270.114 1124.838 3270.060 1123.200 3268.890 c
1122.876 3268.728 l
1124.352 3267.306 l
1124.226 3266.802 1124.136 3266.478 1124.190 3266.154 c
1124.046 3264.228 1124.838 3262.716 1125.468 3261.906 c
1125.990 3261.168 1126.818 3260.988 1127.340 3260.934 c
1128.330 3260.934 1129.356 3261.906 1130.256 3262.770 c
1135.386 3267.162 1137.294 3268.530 1139.562 3270.060 c
1136.088 3266.622 1135.386 3264.426 1135.386 3263.184 c
1135.314 3260.862 1137.096 3259.854 1138.500 3259.854 c
1141.272 3259.782 1147.140 3263.544 1150.074 3265.488 c
1151.676 3266.478 l
1152.090 3266.802 l
1153.314 3267.522 l
1153.224 3267.072 1153.098 3266.694 1153.134 3266.280 c
1153.062 3263.130 1155.582 3259.458 1160.352 3259.350 c
1162.278 3259.350 1164.924 3259.854 1168.488 3262.068 c
1170.558 3263.382 1172.340 3264.840 1174.410 3266.118 c
1173.888 3268.152 l
f
1109.574 3260.574 m
1109.556 3260.340 1109.556 3260.088 1110.492 3259.962 c
1111.248 3259.782 1112.148 3259.764 1112.796 3259.746 c
1114.074 3259.782 1114.650 3260.070 1115.172 3260.988 c
1117.332 3264.498 l
1124.316 3275.694 1128.024 3280.518 1128.996 3281.886 c
1129.356 3282.390 1129.716 3282.840 1130.112 3283.362 c
1130.238 3283.542 1130.274 3283.704 1130.346 3283.848 c
1130.400 3284.352 1130.238 3284.766 1128.852 3284.946 c
1127.232 3285.072 1126.620 3285.036 1126.350 3285.072 c
1125.468 3285.036 1124.802 3284.712 1124.316 3283.884 c
1109.808 3261.006 l
1109.628 3260.664 1109.628 3260.610 1109.574 3260.574 c
f
1180.620 3255.948 m
1184.094 3255.876 1185.084 3259.548 1184.976 3260.232 c
1185.138 3261.762 1184.040 3262.716 1182.132 3262.716 c
1180.098 3262.734 1177.740 3261.312 1177.596 3258.360 c
1177.596 3257.010 1178.820 3255.894 1180.620 3255.948 c
f
*U
*u
0.000 0.000 0.000 1.000 (Black) 0.000 x
516.140 3150.332 m
502.013 3148.301 492.077 3139.618 492.077 3133.743 c
492.077 3132.792 492.509 3130.892 493.589 3129.077 c
494.324 3127.868 495.447 3124.714 504.173 3124.714 c
513.850 3124.714 522.706 3128.516 526.896 3132.360 c
529.748 3134.952 530.698 3137.415 530.698 3139.920 c
530.698 3141.130 530.223 3141.389 529.704 3141.389 c
529.488 3141.389 529.272 3141.346 528.279 3140.698 c
526.076 3139.229 521.496 3136.767 519.077 3135.730 c
513.980 3133.527 509.962 3132.836 506.592 3132.836 c
500.285 3132.836 499.940 3134.477 499.940 3135.773 c
499.940 3136.637 500.933 3139.834 507.024 3142.901 c
509.400 3144.068 513.332 3145.580 519.034 3146.832 c
520.762 3147.221 522.533 3147.480 524.304 3147.912 c
526.119 3148.344 526.983 3148.949 527.976 3150.418 c
528.754 3151.498 528.970 3152.492 528.970 3152.751 c
528.970 3154.090 528.365 3154.565 520.071 3154.695 c
510.653 3154.868 509.919 3155.213 508.882 3155.472 c
506.506 3156.077 506.506 3156.596 506.506 3157.114 c
506.506 3157.848 506.938 3159.533 510.653 3161.693 c
513.159 3163.162 518.732 3164.847 524.218 3164.847 c
525.471 3164.847 526.594 3164.804 527.631 3164.717 c
527.285 3164.415 526.205 3163.551 524.564 3161.780 c
524.261 3161.477 523.743 3161.045 523.743 3160.527 c
523.743 3160.224 524.088 3159.879 524.477 3159.879 c
524.909 3159.879 525.428 3160.268 525.687 3160.440 c
527.976 3161.736 530.266 3163.032 532.599 3164.285 c
533.679 3164.890 536.487 3165.970 536.487 3168.087 c
536.487 3172.061 535.536 3172.796 534.068 3173.357 c
533.895 3173.444 531.476 3174.092 526.767 3174.092 c
519.682 3174.092 512.943 3172.277 508.364 3169.858 c
501.408 3166.186 499.205 3161.348 499.205 3158.237 c
499.205 3156.423 499.767 3154.997 500.804 3153.960 c
501.452 3153.312 503.136 3151.368 516.140 3150.332 c
f
537.005 3141.951 m
539.511 3143.981 542.146 3146.271 544.479 3148.431 c
544.954 3147.092 545.213 3145.709 545.213 3144.500 c
545.213 3140.309 542.751 3138.711 541.887 3138.711 c
540.807 3138.711 540.634 3139.661 540.159 3140.309 c
539.424 3141.389 538.258 3141.994 537.005 3141.951 c
f
574.200 3141.519 m
573.812 3141.216 l
572.386 3139.834 568.930 3137.372 567.461 3136.594 c
566.338 3135.989 565.820 3135.946 565.431 3135.946 c
564.351 3135.946 563.530 3136.767 563.530 3138.020 c
563.530 3139.402 564.308 3143.463 569.492 3150.116 c
570.010 3150.029 570.874 3149.943 571.565 3149.943 c
572.775 3149.943 574.416 3150.332 577.440 3154.306 c
577.916 3154.954 578.434 3155.732 578.520 3155.904 c
578.780 3156.380 578.780 3156.466 578.780 3156.682 c
578.780 3157.071 578.607 3157.460 577.613 3157.546 c
575.756 3157.676 l
578.348 3160.613 l
579.125 3161.477 579.212 3161.909 579.212 3162.212 c
579.212 3162.730 578.823 3163.508 576.749 3163.508 c
574.892 3163.508 573.768 3163.335 570.658 3159.533 c
569.405 3158.021 l
566.813 3158.064 l
564.264 3158.108 562.148 3157.330 559.815 3154.263 c
558.519 3152.621 558.432 3151.973 558.432 3151.671 c
558.432 3151.152 558.648 3150.591 560.463 3150.548 c
563.746 3150.418 l
561.975 3147.956 559.167 3144.932 555.192 3141.864 c
554.804 3141.519 l
553.853 3140.698 l
550.138 3137.372 547.460 3136.594 545.127 3136.594 c
549.922 3140.050 552.168 3144.845 552.168 3149.295 c
552.168 3151.671 551.564 3154.004 550.613 3155.904 c
549.965 3157.114 549.317 3157.416 548.583 3157.416 c
545.948 3157.416 544.608 3154.004 544.306 3153.399 c
543.917 3152.708 542.146 3149.727 532.426 3141.692 c
532.296 3141.519 l
532.210 3141.476 531.735 3141.044 531.735 3140.180 c
531.735 3139.100 532.296 3138.840 532.728 3138.970 c
533.074 3139.056 l
533.290 3134.866 537.221 3130.935 542.016 3130.935 c
543.831 3130.935 546.293 3131.151 553.248 3137.112 c
555.581 3139.056 l
558.778 3141.821 l
556.964 3137.976 556.575 3135.384 556.575 3134.261 c
556.575 3131.064 558.260 3129.596 560.549 3129.596 c
563.962 3129.596 569.276 3133.959 574.546 3138.711 c
574.978 3139.056 l
575.583 3139.920 575.626 3140.266 575.626 3140.741 c
575.626 3141.735 575.324 3141.951 574.978 3141.951 c
574.805 3141.951 574.676 3141.951 574.503 3141.778 c
574.200 3141.519 l
f
581.890 3125.708 m
585.303 3125.708 586.124 3130.416 586.124 3131.324 c
586.124 3133.354 585.044 3134.520 583.143 3134.520 c
581.199 3134.520 578.780 3132.663 578.780 3128.861 c
578.780 3127.047 580.076 3125.708 581.890 3125.708 c
f
630.274 3154.176 m
627.984 3156.941 627.596 3158.626 627.596 3159.533 c
627.596 3161.693 629.108 3164.415 635.847 3164.415 c
637.964 3164.415 640.080 3164.156 642.197 3164.156 c
630.274 3154.176 l
f
628.071 3145.580 m
628.762 3144.413 629.108 3143.074 629.108 3141.735 c
629.108 3137.674 625.652 3134.175 621.591 3134.175 c
620.381 3134.175 619.949 3134.736 619.949 3135.341 c
619.949 3136.378 621.720 3138.408 622.282 3139.100 c
622.973 3139.964 623.967 3141.173 628.071 3145.580 c
f
625.349 3149.640 m
621.850 3146.271 l
620.511 3144.932 619.258 3143.549 618.005 3142.124 c
614.549 3138.192 614.204 3136.421 614.204 3134.823 c
614.204 3132.144 617.184 3128.429 623.060 3128.429 c
630.144 3128.429 635.976 3134.175 635.976 3141.389 c
635.976 3144.586 634.637 3148.085 632.866 3150.548 c
634.378 3152.103 635.026 3152.837 642.586 3160.008 c
644.919 3162.212 644.962 3162.946 644.962 3163.810 c
644.962 3163.940 644.962 3164.026 644.962 3164.112 c
646.517 3164.544 648.245 3165.711 649.584 3168.908 c
650.060 3170.031 650.103 3170.679 650.103 3170.808 c
650.103 3172.407 649.066 3172.925 642.716 3172.925 c
624.572 3172.925 620.295 3165.452 620.295 3159.836 c
620.295 3157.287 621.375 3153.831 625.349 3149.640 c
f
653.343 3151.757 m
659.650 3152.189 665.439 3152.362 670.493 3152.362 c
675.159 3152.362 680.300 3152.232 684.576 3152.016 c
684.879 3152.880 685.354 3153.744 685.959 3154.608 c
680.429 3154.868 674.727 3154.997 670.407 3154.997 c
664.488 3154.997 659.780 3154.824 654.768 3154.522 c
654.120 3153.356 l
653.343 3151.757 l
f
695.333 3137.631 m
697.839 3139.920 699.437 3141.173 705.183 3144.240 c
709.287 3146.400 716.285 3149.597 719.871 3152.794 c
723.759 3156.250 724.752 3158.928 724.752 3162.298 c
724.752 3168.000 721.858 3170.679 717.192 3170.679 c
714.903 3170.679 711.965 3170.333 709.416 3169.772 c
704.794 3168.692 702.202 3167.223 701.554 3166.704 c
698.919 3164.631 696.716 3160.095 696.716 3156.639 c
696.716 3155.775 697.536 3154.868 698.746 3154.868 c
699.048 3154.868 699.437 3154.954 700.647 3155.300 c
702.980 3155.861 704.060 3156.034 706.392 3156.164 c
706.824 3156.207 707.300 3156.120 707.300 3156.768 c
707.300 3156.984 706.997 3158.324 702.850 3158.842 c
707.516 3161.780 713.823 3163.421 717.408 3163.421 c
719.568 3163.421 719.914 3162.730 719.914 3162.039 c
719.914 3161.607 719.655 3160.786 718.532 3159.792 c
717.192 3158.496 715.594 3157.244 711.231 3154.824 c
703.023 3150.245 698.400 3148.733 693.432 3144.197 c
689.588 3140.741 689.199 3138.927 689.199 3137.631 c
689.199 3135.514 690.322 3132.792 691.186 3131.842 c
692.093 3130.848 693.173 3130.114 697.234 3130.114 c
709.978 3130.114 712.613 3132.447 713.780 3133.786 c
715.292 3135.384 716.458 3138.927 716.458 3139.445 c
716.458 3140.180 716.112 3140.525 715.292 3140.525 c
714.773 3140.525 714.341 3140.309 713.175 3140.007 c
708.552 3138.884 702.159 3137.890 695.333 3137.631 c
f
725.876 3137.631 m
728.381 3139.920 729.980 3141.173 735.725 3144.240 c
739.829 3146.400 746.828 3149.597 750.413 3152.794 c
754.301 3156.250 755.295 3158.928 755.295 3162.298 c
755.295 3168.000 752.400 3170.679 747.735 3170.679 c
745.445 3170.679 742.508 3170.333 739.959 3169.772 c
735.336 3168.692 732.744 3167.223 732.096 3166.704 c
729.461 3164.631 727.258 3160.095 727.258 3156.639 c
727.258 3155.775 728.079 3154.868 729.288 3154.868 c
729.591 3154.868 729.980 3154.954 731.189 3155.300 c
733.522 3155.861 734.602 3156.034 736.935 3156.164 c
737.367 3156.207 737.842 3156.120 737.842 3156.768 c
737.842 3156.984 737.540 3158.324 733.392 3158.842 c
738.058 3161.780 744.365 3163.421 747.951 3163.421 c
750.111 3163.421 750.456 3162.730 750.456 3162.039 c
750.456 3161.607 750.197 3160.786 749.074 3159.792 c
747.735 3158.496 746.136 3157.244 741.773 3154.824 c
733.565 3150.245 728.943 3148.733 723.975 3144.197 c
720.130 3140.741 719.741 3138.927 719.741 3137.631 c
719.741 3135.514 720.864 3132.792 721.728 3131.842 c
722.636 3130.848 723.716 3130.114 727.776 3130.114 c
740.520 3130.114 743.156 3132.447 744.322 3133.786 c
745.834 3135.384 747.000 3138.927 747.000 3139.445 c
747.000 3140.180 746.655 3140.525 745.834 3140.525 c
745.316 3140.525 744.884 3140.309 743.717 3140.007 c
739.095 3138.884 732.701 3137.890 725.876 3137.631 c
f
758.535 3151.757 m
764.842 3152.189 770.631 3152.362 775.685 3152.362 c
780.351 3152.362 785.535 3152.232 789.812 3152.016 c
790.114 3152.880 790.589 3153.744 791.194 3154.608 c
785.664 3154.868 779.919 3154.997 775.599 3154.997 c
769.680 3154.997 764.972 3154.824 759.960 3154.522 c
759.312 3153.356 l
758.535 3151.757 l
f
806.271 3131.453 m
806.184 3132.101 806.098 3132.792 806.098 3133.440 c
806.098 3135.816 806.789 3139.229 809.986 3144.586 c
813.356 3150.288 818.324 3156.509 827.223 3164.069 c
826.618 3169.728 825.365 3170.204 824.112 3170.549 c
824.069 3170.592 822.514 3171.024 816.509 3171.024 c
811.455 3171.024 806.832 3170.333 805.925 3170.117 c
803.247 3169.469 801.864 3168.821 798.797 3164.242 c
797.199 3161.823 797.156 3161.088 797.156 3160.916 c
797.156 3160.570 797.242 3160.268 797.588 3159.965 c
797.847 3159.749 798.149 3159.620 798.538 3159.620 c
799.488 3159.620 799.920 3160.311 800.050 3160.440 c
801.648 3161.780 803.895 3163.248 812.794 3163.248 c
814.781 3163.248 816.682 3163.162 818.496 3162.989 c
797.372 3143.679 796.076 3134.045 796.076 3132.360 c
796.076 3129.639 797.674 3128.386 798.754 3128.386 c
799.964 3128.386 801.735 3129.207 806.271 3131.453 c
f
832.407 3128.256 m
832.407 3127.522 833.012 3127.004 833.832 3127.004 c
834.869 3127.004 836.424 3127.392 838.498 3128.948 c
839.621 3129.855 839.794 3129.855 842.040 3132.706 c
849.773 3142.469 852.452 3145.968 857.376 3152.535 c
859.018 3154.695 860.141 3155.948 860.141 3156.855 c
860.141 3157.416 859.061 3158.842 857.420 3158.842 c
856.167 3158.842 855.389 3157.978 849.860 3153.831 c
845.194 3150.332 843.336 3149.511 841.004 3148.690 c
839.492 3148.215 838.844 3147.999 838.066 3147.999 c
836.727 3147.999 836.208 3148.690 836.208 3149.554 c
836.208 3154.133 844.287 3160.829 855.389 3162.514 c
854.784 3161.866 854.266 3161.218 853.661 3160.613 c
852.452 3159.447 852.149 3159.274 852.149 3158.928 c
852.149 3158.626 852.408 3158.367 852.754 3158.367 c
853.100 3158.367 853.488 3158.367 855.303 3159.360 c
859.666 3161.866 860.184 3163.853 860.184 3164.760 c
860.184 3167.007 857.160 3170.938 853.964 3170.938 c
853.056 3170.938 846.965 3169.815 841.004 3166.704 c
831.716 3161.823 829.167 3155.688 829.167 3153.140 c
829.167 3150.980 830.333 3147.653 832.493 3145.191 c
834.221 3143.290 835.474 3142.815 837.029 3142.815 c
838.023 3142.815 841.652 3143.420 848.088 3147.740 c
845.280 3143.938 842.127 3139.964 837.591 3134.823 c
835.128 3133.916 832.407 3129.812 832.407 3128.256 c
f
*U
*u
0.000 0.000 0.000 1.000 (Black) 0.000 x
599.760 3276.594 m
602.262 3282.300 l
601.920 3281.436 608.310 3281.490 611.406 3295.674 c
615.006 3311.820 621.810 3321.468 629.010 3332.880 c
645.858 3359.502 657.072 3361.950 658.314 3362.058 c
660.564 3362.220 663.138 3361.032 663.768 3356.064 c
664.614 3345.552 656.982 3318.516 630.018 3293.658 c
626.436 3290.364 624.924 3285.468 625.662 3280.680 c
625.752 3280.104 625.860 3279.582 625.950 3279.078 c
627.768 3271.806 632.808 3270.636 636.138 3270.888 c
638.208 3271.050 644.256 3272.382 656.730 3283.632 c
659.268 3286.152 l
659.790 3286.674 l
660.690 3287.610 661.806 3288.600 662.850 3289.608 c
664.326 3291.246 664.758 3291.570 667.674 3296.556 c
671.274 3303.234 673.812 3306.402 677.178 3309.624 c
687.672 3320.406 700.002 3325.320 709.794 3326.220 c
718.704 3326.976 722.016 3323.700 722.394 3319.758 c
722.934 3314.970 718.956 3300.354 682.650 3284.136 c
683.820 3277.404 688.950 3274.056 695.736 3274.686 c
699.660 3275.028 706.392 3276.180 723.384 3290.706 c
725.382 3292.506 l
727.272 3294.396 729.306 3296.070 731.160 3297.906 c
733.032 3299.778 734.814 3301.722 736.596 3303.648 c
738.414 3305.664 743.328 3312.972 753.246 3320.064 c
764.082 3327.786 773.442 3330.576 778.212 3331.026 c
783.936 3331.584 787.086 3328.956 787.428 3324.726 c
787.662 3321.702 785.844 3315.438 780.174 3309.228 c
775.494 3303.684 772.038 3302.496 770.328 3302.424 c
768.204 3302.136 766.584 3303.288 766.494 3305.412 c
766.386 3306.330 766.386 3306.564 766.422 3307.374 c
758.448 3303.288 751.572 3297.690 746.298 3291.066 c
745.218 3289.716 744.804 3287.952 745.236 3286.278 c
746.640 3280.842 751.842 3277.566 758.736 3278.160 c
761.256 3278.322 763.920 3278.898 770.724 3281.886 c
777.816 3285.162 787.518 3291.516 792.954 3296.664 c
793.584 3297.258 794.124 3297.978 794.808 3298.518 c
806.130 3307.590 813.888 3316.194 818.550 3323.052 c
808.848 3322.494 l
803.322 3322.242 802.548 3323.574 802.350 3324.978 c
802.296 3325.788 802.404 3327.516 805.860 3332.052 c
812.286 3340.710 818.370 3343.356 826.092 3343.860 c
833.922 3344.346 l
837.360 3348.630 l
845.892 3359.502 849.348 3360.204 854.802 3360.726 c
861.156 3361.122 862.560 3359.214 862.686 3357.900 c
862.740 3356.982 862.524 3355.920 860.364 3353.382 c
853.182 3345.084 l
858.798 3345.156 l
861.858 3345.228 862.524 3344.328 862.686 3343.320 c
862.686 3342.672 862.596 3342.402 861.948 3341.052 c
861.840 3340.638 860.364 3338.532 859.050 3336.624 c
850.824 3325.554 846.036 3324.078 842.364 3323.808 c
840.330 3323.646 837.756 3323.628 836.028 3323.700 c
821.952 3305.016 820.404 3294.162 820.872 3290.526 c
821.106 3287.232 823.734 3285.306 827.082 3285.540 c
828.396 3285.702 829.890 3285.936 833.094 3287.772 c
837.324 3290.202 847.242 3297.528 851.256 3301.434 c
851.832 3301.992 852.462 3302.496 853.074 3303.036 c
854.658 3304.404 858.546 3307.968 861.948 3312.288 c
859.032 3312.792 857.124 3314.538 856.962 3317.364 c
855.954 3328.542 874.260 3340.872 878.832 3341.178 c
880.866 3341.358 881.946 3340.602 882.144 3338.802 c
882.234 3337.956 881.712 3336.084 880.434 3334.716 c
883.962 3335.166 886.590 3335.454 898.164 3337.470 c
902.916 3338.280 903.816 3338.352 904.716 3338.460 c
907.560 3338.640 908.856 3337.956 910.026 3336.624 c
911.412 3334.896 913.572 3329.766 913.662 3328.614 c
913.770 3327.102 913.716 3326.526 911.808 3324.276 c
909.684 3321.900 907.470 3319.884 905.490 3317.652 c
895.932 3307.248 894.960 3301.200 895.104 3299.292 c
895.392 3296.448 897.426 3295.080 900.576 3295.332 c
902.736 3295.548 906.714 3296.034 918.234 3306.348 c
920.376 3308.040 l
921.006 3308.616 l
929.232 3316.266 935.496 3326.634 935.838 3327.102 c
939.078 3331.242 942.354 3334.536 944.892 3336.498 c
951.210 3341.412 955.440 3342.744 958.932 3343.086 c
963.630 3343.482 965.484 3341.520 965.700 3339.108 c
965.880 3337.704 965.448 3334.662 963.072 3330.234 c
958.608 3321.702 951.462 3317.490 947.520 3313.386 c
943.920 3309.750 942.948 3306.744 943.182 3304.368 c
943.524 3300.876 946.836 3298.140 952.002 3298.554 c
955.854 3298.896 964.116 3301.218 976.230 3312.018 c
977.220 3312.810 l
978.048 3313.674 l
980.028 3315.546 982.044 3317.184 984.006 3319.074 c
985.806 3320.928 987.624 3322.944 989.334 3324.762 c
991.152 3326.922 996.120 3334.176 1006.002 3341.250 c
1016.874 3349.062 1026.198 3351.852 1031.004 3352.248 c
1036.674 3352.716 1039.824 3350.106 1040.274 3345.912 c
1040.436 3342.834 1038.672 3336.660 1033.110 3330.342 c
1028.304 3324.906 1024.848 3323.736 1023.138 3323.520 c
1021.068 3323.358 1019.376 3323.646 1019.340 3326.598 c
1019.088 3327.948 1019.862 3334.140 1019.862 3334.140 c
1009.440 3329.190 1001.250 3320.748 997.614 3310.326 c
997.506 3309.912 997.668 3309.624 997.668 3309.228 c
998.280 3302.766 1003.860 3298.734 1011.600 3299.310 c
1014.030 3299.526 1016.784 3300.066 1023.570 3303.072 c
1030.716 3306.330 1038.204 3311.460 1047.006 3318.570 c
1062.792 3331.314 l
1074.654 3308.922 l
1125.396 3334.950 l
1070.604 3296.646 l
1059.678 3318.858 l
1061.064 3321.450 1036.512 3299.634 1032.588 3296.376 c
1022.148 3287.880 1014.660 3285.198 1009.026 3284.784 c
994.446 3283.578 985.392 3295.566 984.456 3306.006 c
984.258 3307.590 984.312 3308.994 984.456 3310.452 c
981.144 3307.554 l
979.974 3306.582 l
979.434 3305.988 l
955.980 3283.740 947.358 3282.714 944.298 3282.462 c
936.972 3281.886 927.630 3287.124 926.478 3300.282 c
926.334 3301.722 926.424 3303.180 926.388 3304.674 c
923.238 3301.848 l
920.862 3299.778 l
914.346 3294.234 908.100 3288.366 901.152 3283.218 c
893.970 3278.088 890.532 3277.242 888.246 3277.170 c
883.188 3276.630 877.374 3279.690 876.492 3288.762 c
876.186 3294.234 878.004 3303.828 890.712 3318.390 c
885.942 3316.428 880.722 3314.826 875.340 3313.890 c
855.198 3296.142 l
854.028 3295.098 l
838.998 3281.382 824.256 3268.584 813.762 3267.666 c
806.886 3267.108 801.450 3270.582 800.676 3278.934 c
800.478 3281.832 801.072 3288.708 805.734 3299.310 c
796.752 3291.246 l
795.942 3290.598 l
790.380 3285.702 785.502 3280.158 779.634 3275.208 c
769.788 3266.676 761.904 3264.030 756.288 3263.580 c
741.762 3262.338 732.582 3274.398 731.664 3284.892 c
731.610 3286.386 731.610 3287.880 731.718 3289.284 c
728.352 3286.386 l
726.444 3284.658 l
724.518 3282.804 722.592 3281.022 720.720 3279.168 c
716.580 3275.028 713.034 3271.050 709.344 3268.134 c
700.740 3261.402 693.792 3259.152 688.266 3258.648 c
675.612 3257.496 663.930 3265.344 664.236 3281.796 c
662.256 3279.942 l
649.998 3269.052 l
646.740 3266.226 642.654 3262.860 639.198 3260.376 c
635.544 3257.784 632.052 3254.778 627.174 3254.436 c
624.798 3254.256 621.900 3255.084 619.092 3257.118 c
614.016 3260.556 609.390 3267.360 608.904 3277.674 c
599.760 3276.594 l
f
417.348 3302.406 m
321.318 3300.570 l
322.344 3301.668 334.962 3313.692 332.082 3314.304 c
331.164 3314.430 330.426 3314.502 329.778 3314.430 c
136.692 3302.082 l
166.734 3315.312 226.404 3348.666 265.248 3369.870 c
278.244 3376.890 282.834 3382.164 290.160 3387.240 c
298.296 3392.748 296.010 3393.630 295.236 3394.134 c
294.354 3394.548 293.436 3394.692 293.220 3394.746 c
291.636 3395.052 286.470 3395.196 282.438 3395.268 c
275.868 3395.286 280.134 3395.412 270.990 3396.312 c
293.922 3407.058 320.832 3432.294 347.004 3445.974 c
354.276 3449.718 360.000 3452.760 362.646 3454.344 c
362.988 3454.560 365.094 3455.676 365.958 3456.828 c
366.048 3457.008 366.354 3457.332 366.534 3457.638 c
367.056 3458.880 367.218 3461.292 363.312 3462.084 c
362.088 3462.336 360.990 3462.192 360.504 3462.192 c
314.316 3458.070 281.934 3459.870 259.164 3464.334 c
214.578 3473.226 205.776 3492.918 202.212 3500.892 c
201.978 3501.576 201.672 3502.134 201.384 3502.764 c
199.494 3506.724 199.584 3512.592 201.924 3517.830 c
209.916 3514.104 221.868 3509.712 229.770 3508.074 c
239.400 3506.184 l
261.846 3501.756 322.632 3501.162 388.872 3502.764 c
390.690 3502.872 393.840 3502.998 397.980 3503.088 c
423.576 3503.898 484.128 3505.824 508.410 3504.348 c
381.582 3430.566 l
378.216 3428.640 377.964 3425.508 381.150 3424.302 c
382.554 3423.672 384.102 3423.204 385.668 3422.970 c
393.984 3421.278 408.834 3419.550 400.032 3413.502 c
377.190 3397.644 344.160 3373.542 323.568 3357.270 c
316.782 3351.942 320.346 3346.290 329.292 3345.516 c
498.690 3346.218 l
491.616 3343.122 l
475.848 3336.192 460.530 3319.956 469.674 3302.424 c
471.168 3299.562 l
417.348 3302.406 l
f
1078.488 3387.366 m
1076.670 3400.344 l
1090.134 3400.416 l
1095.354 3400.488 1096.920 3401.298 1096.596 3406.608 c
1089.738 3458.700 l
1089.018 3463.830 1087.218 3464.982 1080.396 3464.946 c
1068.102 3464.946 l
1066.320 3478.014 l
1159.614 3478.338 l
1186.542 3478.410 1198.980 3468.456 1200.564 3457.134 c
1202.112 3445.434 1192.680 3436.506 1172.898 3435.372 c
1187.226 3435.390 1197.270 3428.820 1199.052 3418.866 c
1201.158 3406.140 l
1202.058 3401.298 1204.542 3400.488 1206.954 3400.488 c
1209.024 3400.506 1210.500 3401.406 1211.238 3402.738 c
1211.310 3402.918 1211.652 3403.260 1211.058 3407.058 c
1210.176 3414.078 l
1223.190 3414.078 l
1224.216 3406.266 l
1224.792 3401.892 1222.974 3386.826 1199.736 3386.808 c
1177.236 3386.682 1165.140 3395.052 1163.304 3409.704 c
1162.062 3418.326 l
1162.062 3418.524 1162.062 3418.722 1162.062 3418.866 c
1161.090 3426.498 1157.868 3428.622 1146.654 3428.568 c
1131.876 3428.514 l
1134.846 3405.960 l
1135.440 3401.892 1136.916 3400.596 1144.098 3400.596 c
1156.554 3400.686 l
1158.174 3387.582 l
1078.488 3387.366 l
f
521.082 3385.278 m
519.372 3398.418 l
532.584 3398.418 l
537.984 3398.490 539.604 3399.444 539.082 3404.466 c
532.332 3456.828 l
531.594 3461.940 529.470 3462.948 523.710 3463.038 c
510.894 3462.948 l
509.148 3475.944 l
640.476 3476.484 l
645.264 3440.628 l
625.284 3440.628 l
623.484 3456.324 611.910 3463.254 595.728 3463.092 c
569.484 3463.074 l
572.760 3438.450 l
581.346 3438.486 l
588.150 3438.576 593.694 3441.384 591.624 3452.436 c
608.580 3452.526 l
613.980 3411.954 l
596.898 3411.828 l
596.520 3422.520 590.616 3425.742 581.130 3425.742 c
574.236 3425.688 l
577.854 3398.706 l
608.148 3398.832 l
619.686 3398.832 630.000 3404.322 627.624 3422.718 c
647.676 3422.718 l
652.482 3385.818 l
521.082 3385.278 l
f
932.490 3386.826 m
930.780 3399.912 l
944.046 3399.912 l
949.410 3399.894 950.976 3400.938 950.562 3405.960 c
943.704 3458.376 l
942.984 3463.398 940.914 3464.478 935.118 3464.424 c
922.266 3464.442 l
920.574 3477.474 l
1051.848 3477.942 l
1056.600 3442.140 l
1036.656 3442.140 l
1034.946 3457.818 1023.372 3464.676 1007.136 3464.640 c
980.982 3464.514 l
984.186 3439.980 l
992.736 3440.016 l
999.756 3440.052 1005.156 3442.896 1003.050 3453.966 c
1020.150 3454.002 l
1025.406 3413.448 l
1008.396 3413.430 l
1007.892 3424.086 1001.988 3427.254 992.556 3427.254 c
985.752 3427.182 l
989.262 3400.182 l
1019.556 3400.254 l
1031.202 3400.344 1041.444 3405.816 1038.924 3424.194 c
1059.102 3424.194 l
1063.962 3387.258 l
932.490 3386.826 l
f
799.722 3386.322 m
797.958 3399.408 l
809.316 3399.444 l
817.344 3399.498 818.496 3400.362 817.758 3405.996 c
810.846 3457.908 l
810.198 3462.786 808.470 3463.938 801.918 3463.938 c
789.498 3463.830 l
787.770 3477.060 l
867.186 3477.258 l
868.914 3464.118 l
855.486 3464.082 l
850.194 3464.028 848.484 3463.254 848.880 3457.638 c
856.620 3399.516 l
873.774 3399.588 l
886.716 3399.678 889.038 3400.812 892.080 3402.828 c
895.716 3405.276 900.000 3409.938 898.470 3424.158 c
918.162 3424.212 l
923.166 3386.754 l
799.722 3386.322 l
f
666.864 3385.872 m
665.208 3398.904 l
676.548 3398.958 l
684.486 3398.994 685.674 3399.894 684.918 3405.528 c
678.024 3457.476 l
677.376 3462.300 675.738 3463.452 669.150 3463.452 c
656.730 3463.344 l
654.948 3476.538 l
734.328 3476.772 l
736.110 3463.596 l
722.664 3463.596 l
717.282 3463.596 715.608 3462.840 716.076 3457.134 c
723.744 3399.084 l
741.006 3399.102 l
753.858 3399.120 756.144 3400.344 759.168 3402.306 c
763.002 3404.826 767.142 3409.470 765.684 3423.618 c
785.358 3423.690 l
790.200 3386.268 l
666.864 3385.872 l
f
486.198 3299.616 m
465.246 3313.980 487.674 3334.698 502.614 3344.076 c
515.412 3352.104 534.852 3359.430 556.092 3362.076 c
570.276 3363.930 577.620 3363.066 578.304 3362.940 c
582.876 3362.184 585.990 3360.456 587.538 3350.124 c
588.258 3344.562 580.428 3340.746 577.332 3338.784 c
570.960 3334.518 564.462 3330.306 558.108 3325.986 c
557.460 3325.518 555.948 3324.258 554.616 3324.186 c
553.536 3323.988 552.456 3324.672 552.312 3325.518 c
552.204 3326.904 553.446 3328.164 554.220 3329.154 c
558.450 3334.392 561.312 3337.074 562.338 3337.992 c
559.098 3337.758 555.768 3337.416 552.060 3337.002 c
535.608 3334.860 519.390 3328.344 512.550 3323.574 c
502.254 3316.590 501.750 3311.910 501.966 3310.092 c
502.146 3308.760 502.308 3307.374 509.742 3306.618 c
512.892 3306.330 515.070 3305.736 543.474 3308.922 c
568.422 3311.784 570.492 3310.776 570.960 3307.302 c
571.068 3306.546 570.780 3303.954 568.944 3300.660 c
566.478 3296.628 564.066 3294.630 558.792 3292.776 c
553.788 3291.048 548.568 3289.752 543.438 3288.024 c
526.824 3282.624 515.646 3277.134 508.950 3273.156 c
491.994 3262.842 490.140 3254.238 490.536 3251.880 c
490.914 3248.586 492.696 3244.392 511.560 3246.768 c
521.622 3248.028 533.376 3251.412 547.866 3259.044 c
554.706 3262.608 567.468 3270.870 573.426 3275.514 c
576.288 3277.584 576.702 3277.836 577.530 3277.908 c
578.952 3278.124 580.482 3277.584 580.932 3274.434 c
581.922 3267.864 580.194 3261.096 572.562 3253.248 c
561.420 3241.566 536.490 3228.300 507.528 3224.610 c
481.266 3221.280 476.730 3229.128 474.120 3231.972 c
470.142 3236.436 468.270 3241.044 467.784 3243.636 c
465.552 3258.936 491.904 3285.324 533.430 3296.052 c
493.938 3293.766 488.268 3298.194 486.198 3299.616 c
f
1130.112 3440.556 m
1145.448 3440.520 l
1154.232 3440.628 1157.544 3442.068 1160.244 3444.138 c
1162.710 3446.190 1164.168 3449.196 1163.574 3452.976 c
1163.214 3456.540 1161.054 3459.456 1157.850 3461.634 c
1154.736 3463.830 1151.298 3465.252 1142.874 3465.180 c
1127.034 3465.072 l
1130.112 3440.556 l
f
684.126 3293.712 m
704.880 3305.178 706.734 3314.358 706.734 3314.358 c
706.644 3315.204 705.960 3315.690 704.970 3315.672 c
704.466 3315.618 703.278 3315.384 700.614 3313.620 c
692.928 3308.346 686.790 3300.624 684.126 3293.712 c
f
629.496 3305.556 m
644.166 3321.576 651.204 3339.684 651.078 3342.024 c
650.970 3342.672 650.682 3342.780 650.430 3342.708 c
648.558 3342.564 636.480 3327.840 629.496 3305.556 c
f
966.384 3346.992 m
963.126 3346.596 960.480 3348.396 960.174 3351.510 c
959.616 3358.512 968.364 3366.846 974.358 3367.350 c
977.400 3367.584 980.712 3365.388 981.144 3361.572 c
981.666 3355.704 974.070 3347.568 966.384 3346.992 c
f
*U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
